#include <iostream>
#include <cstring>
#include <string>
#include <stdio.h>
#include <math.h>

using namespace std;

/*
class MemorySimulator {
		int mmSize, cmSize, cbSize, degree, index, offset, tag, setCount;
		char rPolicy;
		string inputFile;
		std::vector <CacheSet> set;
	public:
		MemorySimulator();
		int getAddressLines();
		int getIndex();
		int getOffset();
		int getTag();
		void setIndex();
		void setOffset();
		void setTag();
};


MemorySimulator::MemorySimulator() {
	cout << "Enter the size of main memory in bytes: ";
	cin >> mmSize;
	cout << "Enter the size of the cache in bytes: ";
	cin >> cmSize;
	cout << "Enter the cache block/line size: ";
	cin >> cbSize;
	cout << "Enter the degree of set-associativity (input an n-way set-associative mapping): ";
	cin >> degree;
	cout << "Enter the replacement policy (L = LRU, F= FIFO): ";
	cin >> rPolicy;
	cout << "Enter the name of the input file containing the list of memory references generated by the CPU: ";
	cin >> inputFile;
}

int MemorySimulator::getAddressLines() {
	return log2(mmSize);
}

void MemorySimulator::setIndex() {
	int setCount = (cmSize / cbSize) / degree;
	index = log2(setCount);
}
void MemorySimulator::setOffset() {
	offset = log2(cbSize);
}
void MemorySimulator::setTag() {
	tag = log2(mmSize) - getIndex() - getOffset();
}

int MemorySimulator::getIndex() {
	return index;
}
int MemorySimulator::getOffset() {
	return offset;
}
int MemorySimulator::getTag() {
	return tag;
}

MemorySimulator::createCache() {
	int i = 0;
	for (i = 0; i < setCount; i++) {
		set[i].setCount(setCount);
	}
}

class CacheSet {
		int blockCount;
		std::vector <CacheSet> set;
	public:
		CacheSet();
};

CacheSet::setBlockCount(int cnt) {
	blockCount = cnt;
}

class CacheBlock {
		int dirtyBit, validBit, tag, index, offset, mmBlock, cmSet, cmBlock;
		bool hit;
	public:
		CacheBlock(int);
};

CacheBlock::CacheBlock(int i) {
	index = i;
}
*/

class CacheBlock {
		int dirtyBit, validBit, tag, index, mmBlock, cmSet, cmBlock, timeStamp, queue;
		bool hit;
	public:
		CacheBlock(int);
};

int calculateLines(int mmSize) {
	return log2(mmSize);
}

int calculateOffset(int cbSize) {
	return log2(cbSize);
}

int calculateIndex(int cmSize, int cbSize, int mapping) {
	return (log2((cmSize / cbSize) / mapping));
}

int calculateTag(int mmSize, int cbSize, int cmSize, int mapping) {
	return calculateLines(mmSize) - calculateOffset(cbSize) - calculateIndex(cmSize, cbSize, mapping);
}

int calculateCmSize(int tag, int cmSize, int cbSize) {
	int overhead = (cmSize / cbSize) * (tag + 1 + 1);
	overhead = overhead / 8;
	return cmSize + overhead;
}

void displayCalculations(int lines, int offset, int index, int tag, int totalCmSize) {
	cout << endl;
	cout << "Simulator Output: " << endl;
	cout << "Total address lines required = " << lines << endl;
	cout << "Number of bits for offset = " << offset << endl;
	cout << "Number of bits for index = " << index << endl;
	cout << "Number of bits for tag = " << tag << endl;
	cout << "Total cache size required = " << totalCmSize << endl;
}


int main() {
	int mmSize = 0, cmSize = 0, cbSize = 0, mapping = 0;
	int lines = 0, offset = 0, index = 0, tag = 0, totalCmSize = 0;
	char rPolicy;
	string inputFile;

	cout << "Enter the size of main memory in bytes: ";
	cin >> mmSize;
	cout << "Enter the size of the cache in bytes: ";
	cin >> cmSize;
	cout << "Enter the cache block/line size: ";
	cin >> cbSize;
	cout << "Enter the degree of set-associativity (input an n-way set-associative mapping): ";
	cin >> mapping;
	cout << "Enter the replacement policy (L = LRU, F= FIFO): ";
	cin >> rPolicy;
	cout << "Enter the name of the input file containing the list of memory references generated by the CPU: ";
	cin >> inputFile;

	lines = calculateLines(mmSize);
	offset = calculateOffset(cbSize);
	index = calculateIndex(cmSize, cbSize, mapping);
	tag = calculateTag(mmSize, cbSize, cmSize, mapping);
	totalCmSize = calculateCmSize(tag, cmSize, cbSize);

	displayCalculations(lines, offset, index, tag, totalCmSize);

}
